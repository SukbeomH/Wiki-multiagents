<context>
# Product Requirements Document (PRD)

## 1 Purpose

멀티‑에이전트 아키텍처를 활용해 **키워드 기반 지식 그래프를 자동 구축**하고, 이를 바탕으로 **위키 문서를 실시간 생성·편집**할 수 있는 시스템을 제공한다. 최종 목표는 사용자가 구조화된 정보를 직관적으로 탐색·관리하도록 지원하는 것이다.

## 2 Core Features

각 에이전트의 입력·출력(JSON Schema)은 Appendix A에 정의돼 있다.

| # | Agent           | 역할                 | 주요 기술                                      |
| - | --------------- | ------------------ | ------------------------------------------ |
| 1 | Research        | 키워드 기반 문서 수집·캐싱    | DuckDuckGo API, SerpAPI Proxy, LRU Cache   |
| 2 | Extractor       | 엔티티·관계 추출·증분 업데이트  | Azure GPT‑4o, Regex Post‑processing        |
| 3 | Retriever (RAG) | 유사 문서 선별·문맥 보강     | FAISS IVF‑HNSW (nlist 256, nprobe 16)      |
| 4 | Wiki            | Markdown 위키 작성·요약  | Jinja2 Template, GPT‑4o Styler             |
| 5 | GraphViz        | 지식 그래프 시각화         | streamlit‑agraph, st‑link‑analysis         |
| 6 | Supervisor      | 오케스트레이션·Lock·Retry | LangGraph, Redis Redlock                   |
| 7 | Feedback        | 사용자 피드백 수집·정제 루프   | SQLite Store, Slack Webhook, Human‑in‑Loop |

## 3 User Experience

* **Personas** : 데이터 리서처 · 콘텐츠 에디터 · 일반 사용자
* **주요 흐름** : ① 키워드 입력 → 그래프·위키 표시 ② 노드 클릭 → 상세 정보 ③ 수정 제안 → 피드백 처리
* **UX 고려** : 사이드바 검색, 그래프 탭·위키 탭, 드래그·줌, 다크 모드, 반응형 레이아웃, RBAC 기반 권한

</context>

<PRD>
## 4 Architecture

### 4‑1 Workflow Architecture

* **패턴** : Supervisor‑Orchestrator + 병렬(Swarm) 실행
* **흐름** : Research → (Extractor ∥ Retriever) → Wiki → GraphViz
* **동시성** : Redis Redlock으로 노드 충돌 방지
* **복구** : 지수 백오프 + Jitter (최대 3) → 실패 시 Rollback & Slack 알림

### 4‑2 Message & State Schema

* 공통 Header : `msg_id`, `agent`, `ts`, `trace_id`, `version`
* 글로벌 Snapshot 주기 : 60 초 또는 단계 완료 시
* Checkpointer 저장소 : Redis‑JSON

### 4‑3 Data Models

| 구성              | 기술                             | 비고                 |
| --------------- | ------------------------------ | ------------------ |
| Knowledge Graph | RDFLib + SQLite Store | 로컬 그래프 파일 저장 |
| Vector Store    | FAISS IVF‑HNSW (4096 dim)      | Recall 튜닝          |
| History DB      | SQLite → TimescaleDB (Phase 3) |                    |

### 4‑4 APIs & Integrations

DuckDuckGo / Wikipedia API · Azure OpenAI · RDFLib · Redis · Slack Webhook · JWT(OAuth Proxy)

### 4‑5 Infrastructure

| 환경            | 구성                                                |
| ------------- | ------------------------------------------------- |
| Dev           | Docker‑Compose · 4‑core CPU · 16 GB RAM           |
| Prod          |  k8s · 3 App Pods · Redis Cluster                |
| IaC           | Terraform · Helm Charts                           |
| Observability | Prometheus · Grafana · OpenTelemetry              |

## 5 Development Roadmap (부트캠프 기준)

| Phase                     | 목표                 | 산출물                                                                                                       |
| ------------------------- | ------------------ | --------------------------------------------------------------------------------------------------------- |
| **0 Foundations**         | End‑to‑End MVP     | 스캐폴드·CI · `.env.example` · Research & Extractor 기본 · RDFLib 로컬 저장 · Streamlit UI v0 · README + 스크린샷 |
| **1 Core RAG & Wiki**     | 고품질 RAG · Wiki 템플릿 | FAISS Store · Retriever · Wiki Agent · Supervisor 통합 · 기본 Metrics                                         |
| **2 Feedback & Security** | 편집 피드백 · 인증        | Feedback Agent · OAuth2 Proxy · Slack 알림 · 그래프 편집 UI · GitHub Actions CI                                  |
| **3 Scale & i18n**        | 다국어 · 확장 · 배포 자동화  | RDFLib 최적화 · Helm +k8s · 언어 감지+다국어 GPT · SNS 수집 · 부하 테스트 + Grafana                                      |

## 6 Logical Dependency Chain

CI → Schema Registry → Research → Extractor → MVP UI → Vector Store & Retriever → Wiki → Supervisor → Monitoring → Feedback → Security → Scale

## 7 Feedback Loop & Refinement

1. 사용자 수정 제안(UI → API)
2. Feedback Agent SQLite 저장
3. Supervisor 검토 → Human Queue 또는 자동 정제
4. Extractor 수정 → KG Diff 저장
5. Wiki 재생성 → 그래프 갱신 → 사용자 알림

## 8 Error Handling & Governance

* Retry 정책 : base 1 s · backoff ×2 · Jitter ±20 % · Max 3
* Rollback : Checkpointer ID 복원
* PII 필터 : Regex + Azure PII API
* Human‑in‑Loop : Slack `#kg‑review` 승인 후 반영

## 9 Risks & Mitigations

| Risk           | Impact   | Mitigation                 |
| -------------- | -------- | -------------------------- |
| LLM 오류         | KG 품질 저하 | 룰 검증 + Human Sampling 10 % |
| RDFLib 성능       | 지연 ↑     | 그래프 크기 최적화, 캐싱        |
| API Rate Limit | 수집 중단    | SerpAPI Cache + Backoff    |
| Scope Creep    | 일정 지연    | Phase Lock, CR Board       |
| 보안 위협          | 데이터 유출   | OAuth, RBAC, 암호화           |

## 10 Submission Checklist (부트캠프)

* [ ] **Streamlit Demo** : `docs/demo.gif`
* [ ] **Docker Compose** : `docker-compose.yml` (streamlit · api)
* [ ] **.env.example** 작성 (AOAI\_ENDPOINT, AOAI\_DEPLOY\_\*, SERPAPI\_KEY …)
* [ ] **Unit Tests** : pytest 커버리지 ≥ 80 %
* [ ] **GitHub Actions** : test → docker build/push
* [ ] **README** : 개요 · 설치 · 실행 · 스크린샷
* [ ] **Prompt Templates** : `prompts/` 디렉터리

## 11 Future Expansion

* RLHF 기반 Agent 튜닝
* Explainable KG (Edge Weight Heatmap)
* 도메인별 플러그인(특허, 학술 등)
* Multi‑tenant SaaS 모델

---

## Appendix

### Appendix A – Agent I/O JSON Schemas

```python
from typing import List, Dict, Any
from pydantic import BaseModel, Field

# === Research Agent ===
class ResearchIn(BaseModel):
    keyword: str
    top_k: int = Field(10, ge=1, le=50)
class ResearchOut(BaseModel):
    docs: List[str]

# === Extractor Agent ===
class ExtractorIn(BaseModel):
    docs: List[str]
class Entity(BaseModel):
    id: str
    type: str
    name: str
    extra: Dict[str, Any] = {}
class Relation(BaseModel):
    source: str
    target: str
    predicate: str
    confidence: float = Field(..., ge=0, le=1)
class ExtractorOut(BaseModel):
    entities: List[Entity]
    relations: List[Relation]

# === Retriever Agent ===
class RetrieverIn(BaseModel):
    query: str
    top_k: int = 5
class RetrieverOut(BaseModel):
    doc_ids: List[str]
    context: str

# === Wiki Agent ===
class WikiIn(BaseModel):
    node_id: str
class WikiOut(BaseModel):
    markdown: str
    summary: str

# === GraphViz Agent ===
class GraphVizIn(BaseModel):
    kg_diff: Dict[str, Any]
class GraphVizOut(BaseModel):
    graph_json: Dict[str, Any]

# === Supervisor Agent ===
class SupervisorIn(BaseModel):
    trace_id: str
    user_id: str
    request: Dict[str, Any]
class SupervisorOut(BaseModel):
    status: str
    result: Dict[str, Any]

# === Feedback Agent ===
class FeedbackIn(BaseModel):
    node_id: str
    feedback: str
class FeedbackOut(BaseModel):
    acknowledged: bool
```
</PRD>